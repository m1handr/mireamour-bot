import type { Conversation } from "@grammyjs/conversations";
import type { Context } from "grammy";
import { randomUUID } from "node:crypto";
import type { MyContext } from "..";
import { menuCommand } from "../commands/menu";
import db from "../lib/db";
import type { Gender } from "../lib/generated/prisma";
import { S3_BUCKET_NAME, S3_ENDPOINT, s3 } from "../lib/s3";

export const createProfile = async (conv: Conversation, ctx: Context) => {
  let age: number | null = null;
  let gender: Gender | null = null;
  let description: string | null = null;
  let imageUrls: string[] | null = null;

  await ctx.reply("üéÇ *–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?*\n\n_–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 30_", {
    parse_mode: "Markdown",
  });

  while (age === null) {
    const input = await conv.form.text();
    const parsed = parseInt(input, 10);

    if (!Number.isNaN(parsed) && parsed >= 18 && parsed <= 30) {
      age = parsed;
    } else {
      await ctx.reply("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 30. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", {
        parse_mode: "Markdown",
      });
    }
  }

  await ctx.reply("üë´ *–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:*", {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üë© –î–µ–≤—É—à–∫–∞", callback_data: "gender-female" },
          { text: "üë® –ü–∞—Ä–µ–Ω—å", callback_data: "gender-male" },
        ],
      ],
    },
  });

  while (gender === null) {
    const cb = await conv.waitFor("callback_query:data");
    switch (cb.callbackQuery.data) {
      case "gender-female":
        gender = "female";
        break;
      case "gender-male":
        gender = "male";
        break;
      default:
        await cb.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
        continue;
    }
    await cb.answerCallbackQuery();
  }

  // –ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
  await ctx.reply(
    "üìù *–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ*\n\n_–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏–ª–∏ —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è. –ù–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤._",
    {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip_description" }],
        ],
      },
    },
  );

  let descriptionSet = false;
  while (!descriptionSet) {
    const descResponse = await conv.wait();

    if (descResponse.update.callback_query?.data === "skip_description") {
      await descResponse.answerCallbackQuery();
      description = null;
      descriptionSet = true;
      await ctx.reply("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ");
    } else if (descResponse.message && "text" in descResponse.message) {
      const text = descResponse.message.text;
      if (!text)
        return ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
        );

      if (text.length > 500) {
        await ctx.reply(
          `‚ùå *–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ*\n\n–¢–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ${text.length} —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 500 —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–æ–≤–∞.`,
          {
            parse_mode: "Markdown",
          },
        );
      } else {
        description = text;
        descriptionSet = true;
        await ctx.reply(
          `‚úÖ *–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!* ${text.length}/500 —Å–∏–º–≤–æ–ª–æ–≤`,
          {
            parse_mode: "Markdown",
          },
        );
      }
    } else {
      await ctx.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
      );
    }
  }

  await ctx.reply(
    "üì∏ *–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é*\n\n_–õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç —Ç–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ñ–æ—Ç–æ ‚Äî —Ç–∞–∫ –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤_",
    {
      parse_mode: "Markdown",
    },
  );

  while (!imageUrls) {
    const photoMsg = await conv.waitFor(":photo", {
      otherwise: (ctx) => ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"),
    });

    const photo = photoMsg.message?.photo?.at(-1);
    if (!photo) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
      continue;
    }

    const fileInfo = await ctx.api.getFile(photo.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;

    const response = await fetch(fileUrl);
    const buffer = Buffer.from(await response.arrayBuffer());

    const key = `profiles/${ctx.from?.id}/${randomUUID()}.jpg`;

    await s3.write(key, buffer);

    imageUrls = [`${S3_ENDPOINT}/${S3_BUCKET_NAME}/${key}`];
  }

  await db.user.update({
    where: { id: ctx.from?.id.toString() },
    data: {
      age,
      gender,
      description,
      imageUrls,
    },
  });

  const genderText = gender === "female" ? "üë© –î–µ–≤—É—à–∫–∞" : "üë® –ü–∞—Ä–µ–Ω—å";
  const descriptionPreview = description
    ? `${description.substring(0, 100)}${description.length > 100 ? "..." : ""}`
    : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";

  await ctx.reply(
    `üéâ *–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n` +
      `*–í–æ–∑—Ä–∞—Å—Ç:* ${age}\n` +
      `*–ü–æ–ª:* ${genderText}\n` +
      `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${descriptionPreview}\n\n` +
      `–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ! ‚ú®`,
    { parse_mode: "Markdown" },
  );

  await menuCommand(ctx as MyContext);
};
