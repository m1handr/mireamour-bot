import type { MyContext } from "..";

export const isSubscribed = async (ctx: MyContext) => {
  const channelId = process.env.CHANNEL_ID;
  const userId = ctx.from?.id;

  if (!channelId || !userId) return;

  try {
    const member = await ctx.api.getChatMember(channelId, userId);

    if (
      member.status === "left" ||
      member.status === "kicked" ||
      member.status === "restricted"
    ) {
      await ctx.reply(
        "üì¢ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n" +
          "–ú—ã –ø—É–±–ª–∏–∫—É–µ–º —Ç–∞–º –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ù§Ô∏è",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É",
                  url: `https://t.me/${process.env.CHANNEL_USERNAME}`,
                },
              ],
              [{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check-sub" }],
            ],
          },
        },
      );
      return false;
    }

    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
    return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üòî");
  }
};
