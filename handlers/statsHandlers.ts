import type { MyContext } from "..";
import { detailedStatsCommand } from "../commands/detailedStats";
import { logger } from "../lib/logger";
import { statsService } from "../lib/statistics";

export const handleStatsFull = async (ctx: MyContext) => {
  try {
    const stats = await statsService.collectFullStats();

    const message = `
üìà *–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚îú –í—Å–µ–≥–æ: ${stats.users.total}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.users.active}
‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.users.newToday}
‚îú –° —Ñ–æ—Ç–æ: ${stats.users.withPhotos}
‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${stats.users.banned}

‚ù§Ô∏è *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –õ–∞–π–∫–æ–≤: ${stats.interactions.likesTotal}
‚îú –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.interactions.likesToday}
‚îú –ú–µ—Ç—á–µ–π: ${stats.interactions.matchesTotal}
‚îú –ú–µ—Ç—á–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.interactions.matchesToday}
‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: ${stats.engagement.activeToday}

üìä *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –õ–∞–π–∫–æ–≤/—é–∑–µ—Ä–∞: ${stats.engagement.likesPerUser}
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${(stats.engagement.matchesPerLike * 100).toFixed(1)}%

üë´ *–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è:*
‚îú –ü–∞—Ä–Ω–µ–π: ${stats.demographics.male}
‚îú –î–µ–≤—É—à–µ–∫: ${stats.demographics.female}
‚îî –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: ${stats.demographics.avgAge}
    `.trim();

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: ctx.callbackQuery?.message?.reply_markup,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    logger.error({ err: errorMessage }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stats_full");
    await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
};

export const handleStatsUsers = async (ctx: MyContext) => {
  try {
    const userStats = await statsService.collectUserStats();

    const message = `
üë• *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*

üöª *–ü–æ –ø–æ–ª—É:*
‚îú –ü–∞—Ä–Ω–µ–π: ${userStats.byGender.male} (${(
      (userStats.byGender.male /
        (userStats.byGender.male + userStats.byGender.female)) *
        100
    ).toFixed(1)}%)
‚îî –î–µ–≤—É—à–µ–∫: ${userStats.byGender.female} (${(
      (userStats.byGender.female /
        (userStats.byGender.male + userStats.byGender.female)) *
        100
    ).toFixed(1)}%)

üéÇ *–ü–æ –≤–æ–∑—Ä–∞—Å—Ç—É:*
‚îú –î–æ 20 –ª–µ—Ç: ${userStats.byAge.under20}
‚îú 20-25 –ª–µ—Ç: ${userStats.byAge.age20to25}
‚îî –°—Ç–∞—Ä—à–µ 25: ${userStats.byAge.over25}

üì∏ *–ü—Ä–æ—Ñ–∏–ª–∏:*
‚îú –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: ${userStats.withPhotos}
‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${userStats.banned}
    `.trim();

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: ctx.callbackQuery?.message?.reply_markup,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    logger.error({ err: errorMessage }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stats_users");
    await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
};

export const handleStatsActivity = async (ctx: MyContext) => {
  try {
    const activityStats = await statsService.collectActivityStats();

    const message = `
‚ù§Ô∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò*

üëç *–õ–∞–π–∫–∏:*
‚îú –í—Å–µ–≥–æ: ${activityStats.likes.total}
‚îú –°–µ–≥–æ–¥–Ω—è: ${activityStats.likes.today}
‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: ${activityStats.likes.week}

üíë *–ú–µ—Ç—á–∏:*
‚îú –í—Å–µ–≥–æ: ${activityStats.matches.total}
‚îú –°–µ–≥–æ–¥–Ω—è: ${activityStats.matches.today}
‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: ${activityStats.matches.week}

üö® *–ñ–∞–ª–æ–±—ã:*
‚îú –í—Å–µ–≥–æ: ${activityStats.reports.total}
‚îú –°–µ–≥–æ–¥–Ω—è: ${activityStats.reports.today}
‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: ${activityStats.reports.week}

üë§ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è:* ${activityStats.activeToday}
    `.trim();

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: ctx.callbackQuery?.message?.reply_markup,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    logger.error({ err: errorMessage }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stats_activity");
    await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
};

export const handleStatsQuick = async (ctx: MyContext) => {
  try {
    const quickStats = await statsService.collectQuickStats();

    const message = `
üìà *–ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${quickStats.totalUsers}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${quickStats.activeUsers}
üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${quickStats.newUsersToday}
‚ù§Ô∏è –õ–∞–π–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${quickStats.likesToday}
üíë –ú–µ—Ç—á–µ–π —Å–µ–≥–æ–¥–Ω—è: ${quickStats.matchesToday}

‚è± *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleTimeString("ru-RU")}
    `.trim();

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: ctx.callbackQuery?.message?.reply_markup,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    logger.error({ err: errorMessage }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stats_quick");
    await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
};

export const handleStatsRefresh = async (ctx: MyContext) => {
  await ctx.answerCallbackQuery({ text: "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º..." });
  await detailedStatsCommand(ctx);
};

export const handleStatsReports = async (ctx: MyContext) => {
  try {
    const activityStats = await statsService.collectActivityStats();

    const message = `
üö® *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ñ–ê–õ–û–ë*

üìä –í—Å–µ–≥–æ –∂–∞–ª–æ–±: ${activityStats.reports.total}
üìÖ –°–µ–≥–æ–¥–Ω—è: ${activityStats.reports.today}
üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: ${activityStats.reports.week}

‚ÑπÔ∏è *–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∂–∞–ª–æ–±–∞–º –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö*
    `.trim();

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: ctx.callbackQuery?.message?.reply_markup,
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    logger.error({ err: errorMessage }, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ stats_reports");
    await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏" });
  }
};
