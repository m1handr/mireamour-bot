import type { MyContext } from "..";
import { reportReasonKeyboard } from "../keyboards/reportReasonKeyboard";
import db from "../lib/db";
import { notifyAdminAboutReport } from "../utils/notifyAdminAboutReport";
import { setDislike } from "./handleLike";

const reasonsMap: Record<string, string> = {
  "report-reason-spam": "–°–ø–∞–º",
  "report-reason-bad": "–ù–µ–∞–¥–µ–∫–≤–∞—Ç",
  "report-reason-photo": "–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ñ–æ—Ç–æ",
  "report-reason-abuse": "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è",
  "report-reason-fake": "–§–µ–π–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
  "report-reason-scam": "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ / –ø—Ä–æ—Å—å–±—ã –æ –¥–µ–Ω—å–≥–∞—Ö",
  "report-reason-explicit": "–ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
};

export const reportProfile = async (ctx: MyContext) => {
  ctx.editMessageReplyMarkup({
    reply_markup: reportReasonKeyboard,
  });
};

export const reportReason = async (ctx: MyContext) => {
  const reporterId = ctx.from?.id?.toString();
  const targetId = ctx.session?.currentProfileId;
  const callbackData = ctx.callbackQuery?.data;

  if (!reporterId || !targetId || !callbackData) {
    return ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ üòÖ" });
  }

  const reason = reasonsMap[callbackData];
  if (!reason) {
    return ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ üòÖ" });
  }

  await db.report.create({
    data: { fromUserId: reporterId, toUserId: targetId, reason },
  });

  await ctx.answerCallbackQuery({
    text: `üôè –°–ø–∞—Å–∏–±–æ! –ñ–∞–ª–æ–±–∞ (${reason}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`,
  });

  await notifyAdminAboutReport(ctx, targetId, reporterId, reason);

  await setDislike(ctx);
};
