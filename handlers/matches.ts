import type { MyContext } from "..";
import { matchesKeyboard } from "../keyboards/matchesKeyboard";
import db from "../lib/db";

export const matches = async (ctx: MyContext) => {
  const userId = ctx.from?.id.toString();

  const userMatches = await db.match.findMany({
    where: {
      OR: [{ userAId: userId }, { userBId: userId }],
    },
    include: {
      userA: true,
      userB: true,
    },
  });

  if (userMatches.length === 0) {
    await ctx.editMessageText("üí´ –ü–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç –º–µ—Ç—á–µ–π", {
      reply_markup: matchesKeyboard,
    });
    return ctx.answerCallbackQuery();
  }

  const matchList = userMatches
    .map((m) => {
      const matchUser = m.userAId === userId ? m.userB : m.userA;
      return `‚Ä¢ ${matchUser?.name ?? "–ë–µ–∑ –∏–º–µ–Ω–∏"}`;
    })
    .join("\n");

  const text =
    `üíû –¢–≤–æ–∏ –º–µ—Ç—á–∏:\n\n${matchList}\n\n` +
    "–ü–∏—à–∏ –ø–µ—Ä–≤—ã–º–∏ ‚Äî –∫—Ç–æ –∑–Ω–∞–µ—Ç, –∫ —á–µ–º—É —ç—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç üòâ";

  await ctx.editMessageText(text, {
    reply_markup: matchesKeyboard,
  });

  await ctx.answerCallbackQuery();
};
