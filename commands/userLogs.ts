import type { MyContext } from "..";
import db from "../lib/db";
import { config } from "../lib/env";

export const userLogsCommand = async (ctx: MyContext) => {
  if (ctx.from?.id.toString() !== config.ADMIN_CHAT_ID) return;

  const params = ctx.message?.text?.split(" ") || [];
  const targetUserId = params[1];

  if (!targetUserId) {
    await ctx.reply(
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /userlogs [user_id]\n\n" +
        "–ü—Ä–∏–º–µ—Ä: /userlogs 123456789 5",
    );
    return;
  }

  try {
    const user = await db.user.findUnique({
      where: { id: targetUserId },
    });

    if (!user) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    const userInfo = `
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
‚îú ID: ${targetUserId}
‚îú –ò–º—è: ${user.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
‚îú Username: ${user.username ? `@${user.username}` : "–ù–µ —É–∫–∞–∑–∞–Ω"}
‚îú –í–∏–¥–∏–º—ã–π: ${user.isVisible ? "‚úÖ" : "‚ùå"}
‚îî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.createdAt.toLocaleString("ru-RU")}

<b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –ë–î.</b>
    `.trim();

    if (user.imageUrls[0]) {
      await ctx.replyWithPhoto(user.imageUrls[0], {
        caption: userInfo,
        parse_mode: "HTML",
      });
    } else {
      await ctx.reply(userInfo, {
        parse_mode: "HTML",
      });
    }
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${errorMessage}`);
  }
};

export const findUserCommand = async (ctx: MyContext) => {
  if (ctx.from?.id.toString() !== config.ADMIN_CHAT_ID) return;

  const query = ctx.message?.text?.split(" ").slice(1).join(" ");
  if (!query) {
    await ctx.reply(
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /finduser <–∏–º—è –∏–ª–∏ username>\n\n" +
        "–ü—Ä–∏–º–µ—Ä: /finduser Ivan\n" +
        "–ü—Ä–∏–º–µ—Ä: /finduser @username",
    );
    return;
  }

  try {
    const searchTerm = query.replace("@", "");

    const users = await db.user.findMany({
      where: {
        OR: [
          { name: { contains: searchTerm, mode: "insensitive" } },
          { username: { contains: searchTerm, mode: "insensitive" } },
        ],
      },
      select: {
        id: true,
        name: true,
        username: true,
        isVisible: true,
        createdAt: true,
      },
      take: 10,
    });

    if (users.length === 0) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    const usersList = users
      .map(
        (user) =>
          `‚îú ${user.name || "–ë–µ–∑ –∏–º–µ–Ω–∏"} (${
            user.username ? `@${user.username}` : "–Ω–µ—Ç username"
          }) - ID: ${user.id}`,
      )
      .join("\n");

    const message = `
üë• <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> (${users.length})

${usersList}

<b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> /userlogs [id]
    `.trim();

    await ctx.reply(message, {
      parse_mode: "HTML",
      link_preview_options: { is_disabled: true },
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${errorMessage}`);
  }
};
