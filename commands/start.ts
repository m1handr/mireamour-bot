import type { MyContext } from "..";
import { startCommandKeyboard } from "../keyboards/startCommandKeyboard";
import db from "../lib/db";

const helloStickers = [
  "CAACAgIAAxkBAAOyaOwLLdPBKt5t_dj0y0CamKNhIvEAAokCAAJWnb0KoVbNAiEyDj02BA",
  "CAACAgIAAxkBAAO0aOwLU9PZbpppcmApfIa82SeRXJIAAnsAA8GcYAzbGh-2HVQ2iDYE",
  "CAACAgIAAxkBAAO2aOwLZltA_HHsJ-70dJAJ-_hOIL0AAkgAA1KJkSNu2S6onD1PAAE2BA",
];

export const startCommand = async (ctx: MyContext) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  const existUser = await db.user.findUnique({
    where: {
      id: userId.toString(),
    },
  });

  if (!existUser) {
    await db.user.create({
      data: {
        id: userId.toString(),
        name: ctx.from?.first_name,
      },
    });
  }

  const randomSticker =
    helloStickers[Math.floor(Math.random() * helloStickers.length)];
  if (randomSticker) await ctx.replyWithSticker(randomSticker);
  return ctx.reply(
    `<b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name || "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"}! üëã</b>\n
–≠—Ç–æ <b>–ú–ò–†–≠–ê–º—É—Ä</b> ‚Äî –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–ò–†–≠–ê.\n
<blockquote>–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –Ω–∞—à–∏–º–∏ <a href="https://telegra.ph/MIREHAmur--Usloviya-10-12">—É—Å–ª–æ–≤–∏—è–º–∏</a></blockquote>\n
<b>–ù–ê–ß–ù–ï–ú? üëá</b>`,
    {
      parse_mode: "HTML",
      link_preview_options: { is_disabled: true },
      reply_markup: startCommandKeyboard,
    },
  );
};
