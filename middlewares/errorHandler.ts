import type { MyContext } from "..";
import { config } from "../lib/env";
import { logger } from "../lib/logger";

export const errorHandler = async (
  ctx: MyContext,
  next: () => Promise<void>,
) => {
  try {
    await next();
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    const stack = error instanceof Error ? error.stack : undefined;

    logger.error(
      {
        err: error,
        stack,
        userId: ctx.from?.id,
      },
      `–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`,
    );

    try {
      await ctx.reply("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
    } catch (replyError) {
      logger.error(replyError, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ");
    }

    if (config.ADMIN_CHAT_ID) {
      try {
        await ctx.api.sendMessage(
          config.ADMIN_CHAT_ID,
          `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}:\n${errorMessage}`,
        );
      } catch (adminError) {
        logger.error(adminError, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞");
      }
    }
  }
};
